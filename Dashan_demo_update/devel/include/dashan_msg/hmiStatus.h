// Generated by gencpp from file dashan_msg/hmiStatus.msg
// DO NOT EDIT!


#ifndef DASHAN_MSG_MESSAGE_HMISTATUS_H
#define DASHAN_MSG_MESSAGE_HMISTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dashan_msg
{
template <class ContainerAllocator>
struct hmiStatus_
{
  typedef hmiStatus_<ContainerAllocator> Type;

  hmiStatus_()
    : commLinkState(0)
    , buttonState(0)
    , batteryState(0)
    , batteryPercent(0)
    , temperature(0)
    , humidity(0)
    , smogAlert(0)
    , pushRodPos(0)
    , emergentState(0)
    , zhishancmdshow(0)
    , pos_x(0.0)
    , pos_y(0.0)  {
    }
  hmiStatus_(const ContainerAllocator& _alloc)
    : commLinkState(0)
    , buttonState(0)
    , batteryState(0)
    , batteryPercent(0)
    , temperature(0)
    , humidity(0)
    , smogAlert(0)
    , pushRodPos(0)
    , emergentState(0)
    , zhishancmdshow(0)
    , pos_x(0.0)
    , pos_y(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _commLinkState_type;
  _commLinkState_type commLinkState;

   typedef uint8_t _buttonState_type;
  _buttonState_type buttonState;

   typedef uint8_t _batteryState_type;
  _batteryState_type batteryState;

   typedef uint8_t _batteryPercent_type;
  _batteryPercent_type batteryPercent;

   typedef uint8_t _temperature_type;
  _temperature_type temperature;

   typedef uint8_t _humidity_type;
  _humidity_type humidity;

   typedef uint8_t _smogAlert_type;
  _smogAlert_type smogAlert;

   typedef uint8_t _pushRodPos_type;
  _pushRodPos_type pushRodPos;

   typedef uint8_t _emergentState_type;
  _emergentState_type emergentState;

   typedef uint8_t _zhishancmdshow_type;
  _zhishancmdshow_type zhishancmdshow;

   typedef float _pos_x_type;
  _pos_x_type pos_x;

   typedef float _pos_y_type;
  _pos_y_type pos_y;




  typedef boost::shared_ptr< ::dashan_msg::hmiStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dashan_msg::hmiStatus_<ContainerAllocator> const> ConstPtr;

}; // struct hmiStatus_

typedef ::dashan_msg::hmiStatus_<std::allocator<void> > hmiStatus;

typedef boost::shared_ptr< ::dashan_msg::hmiStatus > hmiStatusPtr;
typedef boost::shared_ptr< ::dashan_msg::hmiStatus const> hmiStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dashan_msg::hmiStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dashan_msg::hmiStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dashan_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'dashan_msg': ['/home/zhishan/Dashan_demo_update/src/dashan_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dashan_msg::hmiStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dashan_msg::hmiStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dashan_msg::hmiStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dashan_msg::hmiStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dashan_msg::hmiStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dashan_msg::hmiStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dashan_msg::hmiStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "783462f146126d76e1d0b3fc51dd06bf";
  }

  static const char* value(const ::dashan_msg::hmiStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x783462f146126d76ULL;
  static const uint64_t static_value2 = 0xe1d0b3fc51dd06bfULL;
};

template<class ContainerAllocator>
struct DataType< ::dashan_msg::hmiStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dashan_msg/hmiStatus";
  }

  static const char* value(const ::dashan_msg::hmiStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dashan_msg::hmiStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#communication link state\n\
uint8 commLinkState\n\
#button state\n\
uint8 buttonState\n\
#battery info\n\
uint8 batteryState  # 0:normal state; 1:charge state\n\
uint8 batteryPercent  # left percent 5%-100%\n\
\n\
#temperature\n\
uint8 temperature\n\
#humidity\n\
uint8 humidity\n\
#smog alert\n\
uint8 smogAlert  #1:alert 	0:no smog\n\
#push rod pos\n\
uint8 pushRodPos\n\
#emergent push button\n\
uint8 emergentState\n\
#define CMD_SAVE_INIT_PARA 1\n\
#define CMD_SAVE_GOAL_PSTN 2 here send the pos_x pos_y\n\
#define CMD_SEND_GOALS 3 \n\
#define CMD_SEND_CURR_PSTN 4\n\
#define CMD_SAVE_POS 5\n\
#define CMD_SEND_POS 6\n\
#define CMD_SET_INIT_POS 7\n\
#define CMD_VOICE 8\n\
#define CMD_CLEAR_NAVIGOALS 9\n\
uint8 zhishancmdshow\n\
#position show\n\
float32 pos_x\n\
float32 pos_y\n\
";
  }

  static const char* value(const ::dashan_msg::hmiStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dashan_msg::hmiStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.commLinkState);
      stream.next(m.buttonState);
      stream.next(m.batteryState);
      stream.next(m.batteryPercent);
      stream.next(m.temperature);
      stream.next(m.humidity);
      stream.next(m.smogAlert);
      stream.next(m.pushRodPos);
      stream.next(m.emergentState);
      stream.next(m.zhishancmdshow);
      stream.next(m.pos_x);
      stream.next(m.pos_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hmiStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dashan_msg::hmiStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dashan_msg::hmiStatus_<ContainerAllocator>& v)
  {
    s << indent << "commLinkState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.commLinkState);
    s << indent << "buttonState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buttonState);
    s << indent << "batteryState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.batteryState);
    s << indent << "batteryPercent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.batteryPercent);
    s << indent << "temperature: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temperature);
    s << indent << "humidity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.humidity);
    s << indent << "smogAlert: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.smogAlert);
    s << indent << "pushRodPos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pushRodPos);
    s << indent << "emergentState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergentState);
    s << indent << "zhishancmdshow: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.zhishancmdshow);
    s << indent << "pos_x: ";
    Printer<float>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<float>::stream(s, indent + "  ", v.pos_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DASHAN_MSG_MESSAGE_HMISTATUS_H
