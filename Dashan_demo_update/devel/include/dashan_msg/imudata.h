// Generated by gencpp from file dashan_msg/imudata.msg
// DO NOT EDIT!


#ifndef DASHAN_MSG_MESSAGE_IMUDATA_H
#define DASHAN_MSG_MESSAGE_IMUDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dashan_msg
{
template <class ContainerAllocator>
struct imudata_
{
  typedef imudata_<ContainerAllocator> Type;

  imudata_()
    : Temp(0.0)
    , Ax(0.0)
    , Ay(0.0)
    , Az(0.0)
    , Gx(0.0)
    , Gy(0.0)
    , Gz(0.0)
    , Yaw(0.0)  {
    }
  imudata_(const ContainerAllocator& _alloc)
    : Temp(0.0)
    , Ax(0.0)
    , Ay(0.0)
    , Az(0.0)
    , Gx(0.0)
    , Gy(0.0)
    , Gz(0.0)
    , Yaw(0.0)  {
  (void)_alloc;
    }



   typedef float _Temp_type;
  _Temp_type Temp;

   typedef float _Ax_type;
  _Ax_type Ax;

   typedef float _Ay_type;
  _Ay_type Ay;

   typedef float _Az_type;
  _Az_type Az;

   typedef float _Gx_type;
  _Gx_type Gx;

   typedef float _Gy_type;
  _Gy_type Gy;

   typedef float _Gz_type;
  _Gz_type Gz;

   typedef float _Yaw_type;
  _Yaw_type Yaw;




  typedef boost::shared_ptr< ::dashan_msg::imudata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dashan_msg::imudata_<ContainerAllocator> const> ConstPtr;

}; // struct imudata_

typedef ::dashan_msg::imudata_<std::allocator<void> > imudata;

typedef boost::shared_ptr< ::dashan_msg::imudata > imudataPtr;
typedef boost::shared_ptr< ::dashan_msg::imudata const> imudataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dashan_msg::imudata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dashan_msg::imudata_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dashan_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'dashan_msg': ['/home/zhishan/Dashan_demo_update/src/dashan_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dashan_msg::imudata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dashan_msg::imudata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dashan_msg::imudata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dashan_msg::imudata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dashan_msg::imudata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dashan_msg::imudata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dashan_msg::imudata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80dfed3c14e2a11e7333746f7785dbcc";
  }

  static const char* value(const ::dashan_msg::imudata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80dfed3c14e2a11eULL;
  static const uint64_t static_value2 = 0x7333746f7785dbccULL;
};

template<class ContainerAllocator>
struct DataType< ::dashan_msg::imudata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dashan_msg/imudata";
  }

  static const char* value(const ::dashan_msg::imudata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dashan_msg::imudata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Temp\n\
\n\
float32 Ax\n\
float32 Ay\n\
float32 Az\n\
\n\
float32 Gx\n\
float32 Gy\n\
float32 Gz\n\
float32 Yaw\n\
\n\
";
  }

  static const char* value(const ::dashan_msg::imudata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dashan_msg::imudata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Temp);
      stream.next(m.Ax);
      stream.next(m.Ay);
      stream.next(m.Az);
      stream.next(m.Gx);
      stream.next(m.Gy);
      stream.next(m.Gz);
      stream.next(m.Yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imudata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dashan_msg::imudata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dashan_msg::imudata_<ContainerAllocator>& v)
  {
    s << indent << "Temp: ";
    Printer<float>::stream(s, indent + "  ", v.Temp);
    s << indent << "Ax: ";
    Printer<float>::stream(s, indent + "  ", v.Ax);
    s << indent << "Ay: ";
    Printer<float>::stream(s, indent + "  ", v.Ay);
    s << indent << "Az: ";
    Printer<float>::stream(s, indent + "  ", v.Az);
    s << indent << "Gx: ";
    Printer<float>::stream(s, indent + "  ", v.Gx);
    s << indent << "Gy: ";
    Printer<float>::stream(s, indent + "  ", v.Gy);
    s << indent << "Gz: ";
    Printer<float>::stream(s, indent + "  ", v.Gz);
    s << indent << "Yaw: ";
    Printer<float>::stream(s, indent + "  ", v.Yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DASHAN_MSG_MESSAGE_IMUDATA_H
