// Generated by gencpp from file dashan_msg/zhishancmd.msg
// DO NOT EDIT!


#ifndef DASHAN_MSG_MESSAGE_ZHISHANCMD_H
#define DASHAN_MSG_MESSAGE_ZHISHANCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dashan_msg
{
template <class ContainerAllocator>
struct zhishancmd_
{
  typedef zhishancmd_<ContainerAllocator> Type;

  zhishancmd_()
    : zhishanCommand(0)
    , autoCharge(0)
    , rodControl(0)
    , zhishanPara(0)
    , zhishanVoice(0)  {
    }
  zhishancmd_(const ContainerAllocator& _alloc)
    : zhishanCommand(0)
    , autoCharge(0)
    , rodControl(0)
    , zhishanPara(0)
    , zhishanVoice(0)  {
  (void)_alloc;
    }



   typedef uint8_t _zhishanCommand_type;
  _zhishanCommand_type zhishanCommand;

   typedef uint8_t _autoCharge_type;
  _autoCharge_type autoCharge;

   typedef uint8_t _rodControl_type;
  _rodControl_type rodControl;

   typedef uint8_t _zhishanPara_type;
  _zhishanPara_type zhishanPara;

   typedef uint8_t _zhishanVoice_type;
  _zhishanVoice_type zhishanVoice;




  typedef boost::shared_ptr< ::dashan_msg::zhishancmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dashan_msg::zhishancmd_<ContainerAllocator> const> ConstPtr;

}; // struct zhishancmd_

typedef ::dashan_msg::zhishancmd_<std::allocator<void> > zhishancmd;

typedef boost::shared_ptr< ::dashan_msg::zhishancmd > zhishancmdPtr;
typedef boost::shared_ptr< ::dashan_msg::zhishancmd const> zhishancmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dashan_msg::zhishancmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dashan_msg::zhishancmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dashan_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'dashan_msg': ['/home/zhishan/Dashan_demo_update/src/dashan_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dashan_msg::zhishancmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dashan_msg::zhishancmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dashan_msg::zhishancmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dashan_msg::zhishancmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dashan_msg::zhishancmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dashan_msg::zhishancmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dashan_msg::zhishancmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "071fca3f528f7a18348853a91c078ea6";
  }

  static const char* value(const ::dashan_msg::zhishancmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x071fca3f528f7a18ULL;
  static const uint64_t static_value2 = 0x348853a91c078ea6ULL;
};

template<class ContainerAllocator>
struct DataType< ::dashan_msg::zhishancmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dashan_msg/zhishancmd";
  }

  static const char* value(const ::dashan_msg::zhishancmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dashan_msg::zhishancmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#1:save init position 2:save goal position\n\
#3:navigation goals 4:commision release\n\
#5:save call position 6:one key call\n\
#7：set init position 8：voice\n\
#9：clear navigation goals in yaml\n\
#10: turn voice \n\
#11:touch screen\n\
#12:miaozhun\n\
#13:shutdown\n\
#14:reboot\n\
#15:turn left\n\
#16:start run after speaking finished,receive from other node,jixuqianjin\n\
#17:start speak,send to other node\n\
#18:patrol is finished\n\
#19:yuan di deng dai\n\
#20：dance\n\
#21:turn right\n\
#22：select one point and generate four directions points\n\
uint8 zhishanCommand\n\
#1:auto charge 2:charge finish 3:send command to serial to prepare charge\n\
uint8 autoCharge\n\
#1: rise 2:fall 3:head turn left 4:head turn right 5:arm up 6:arm down 7:dance 8：stop dance\n\
uint8 rodControl\n\
# reserve to use \n\
# voice8 1：interact 2：play mode 3:play voice 4：interupt 5:patrol and play\n\
# 6:stop play image after voice is finished 7:patrol and speak\n\
# turn voice 10: 1:up 2:down\n\
# touch screen11：1:enable 2:disable\n\
# turn15and21: the number of PI/4 \n\
uint8 zhishanPara\n\
# voice\n\
# zhishanCommand 8：voice 5:patrol and play zhishanVoice = number\n\
uint8 zhishanVoice\n\
";
  }

  static const char* value(const ::dashan_msg::zhishancmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dashan_msg::zhishancmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zhishanCommand);
      stream.next(m.autoCharge);
      stream.next(m.rodControl);
      stream.next(m.zhishanPara);
      stream.next(m.zhishanVoice);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct zhishancmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dashan_msg::zhishancmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dashan_msg::zhishancmd_<ContainerAllocator>& v)
  {
    s << indent << "zhishanCommand: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.zhishanCommand);
    s << indent << "autoCharge: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autoCharge);
    s << indent << "rodControl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rodControl);
    s << indent << "zhishanPara: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.zhishanPara);
    s << indent << "zhishanVoice: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.zhishanVoice);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DASHAN_MSG_MESSAGE_ZHISHANCMD_H
