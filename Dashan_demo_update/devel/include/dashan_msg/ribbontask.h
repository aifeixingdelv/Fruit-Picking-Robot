// Generated by gencpp from file dashan_msg/ribbontask.msg
// DO NOT EDIT!


#ifndef DASHAN_MSG_MESSAGE_RIBBONTASK_H
#define DASHAN_MSG_MESSAGE_RIBBONTASK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dashan_msg
{
template <class ContainerAllocator>
struct ribbontask_
{
  typedef ribbontask_<ContainerAllocator> Type;

  ribbontask_()
    : cmd(0)
    , senderip()
    , from(0)
    , taskid()
    , routeid(0)
    , pointid()
    , size(0)  {
    }
  ribbontask_(const ContainerAllocator& _alloc)
    : cmd(0)
    , senderip(_alloc)
    , from(0)
    , taskid(_alloc)
    , routeid(0)
    , pointid(_alloc)
    , size(0)  {
  (void)_alloc;
    }



   typedef uint8_t _cmd_type;
  _cmd_type cmd;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _senderip_type;
  _senderip_type senderip;

   typedef uint8_t _from_type;
  _from_type from;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _taskid_type;
  _taskid_type taskid;

   typedef int32_t _routeid_type;
  _routeid_type routeid;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _pointid_type;
  _pointid_type pointid;

   typedef uint8_t _size_type;
  _size_type size;




  typedef boost::shared_ptr< ::dashan_msg::ribbontask_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dashan_msg::ribbontask_<ContainerAllocator> const> ConstPtr;

}; // struct ribbontask_

typedef ::dashan_msg::ribbontask_<std::allocator<void> > ribbontask;

typedef boost::shared_ptr< ::dashan_msg::ribbontask > ribbontaskPtr;
typedef boost::shared_ptr< ::dashan_msg::ribbontask const> ribbontaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dashan_msg::ribbontask_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dashan_msg::ribbontask_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dashan_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'dashan_msg': ['/home/zhishan/Dashan_demo_update/src/dashan_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dashan_msg::ribbontask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dashan_msg::ribbontask_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dashan_msg::ribbontask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dashan_msg::ribbontask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dashan_msg::ribbontask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dashan_msg::ribbontask_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dashan_msg::ribbontask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5baa3f4faea623af8de2b30e03625db3";
  }

  static const char* value(const ::dashan_msg::ribbontask_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5baa3f4faea623afULL;
  static const uint64_t static_value2 = 0x8de2b30e03625db3ULL;
};

template<class ContainerAllocator>
struct DataType< ::dashan_msg::ribbontask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dashan_msg/ribbontask";
  }

  static const char* value(const ::dashan_msg::ribbontask_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dashan_msg::ribbontask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#req task 1; release task 2\n\
uint8 cmd\n\
#senderip\n\
string senderip\n\
#from dc or pda\n\
uint8 from\n\
#task uuid\n\
string taskid\n\
#route id\n\
int32 routeid\n\
#pointid of task \n\
int32[] pointid\n\
uint8 size\n\
";
  }

  static const char* value(const ::dashan_msg::ribbontask_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dashan_msg::ribbontask_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.senderip);
      stream.next(m.from);
      stream.next(m.taskid);
      stream.next(m.routeid);
      stream.next(m.pointid);
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ribbontask_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dashan_msg::ribbontask_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dashan_msg::ribbontask_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "senderip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.senderip);
    s << indent << "from: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.from);
    s << indent << "taskid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.taskid);
    s << indent << "routeid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.routeid);
    s << indent << "pointid[]" << std::endl;
    for (size_t i = 0; i < v.pointid.size(); ++i)
    {
      s << indent << "  pointid[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.pointid[i]);
    }
    s << indent << "size: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DASHAN_MSG_MESSAGE_RIBBONTASK_H
