# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dashan_msg/diagnosis.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class diagnosis(genpy.Message):
  _md5sum = "e928f8638651cca003f8f90f1a284ea4"
  _type = "dashan_msg/diagnosis"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#initial infomation
uint8 initInfo
#0:ok 1:motor
uint8 hardwareInfo
#nodes state 0:ok 1:notok
uint8 Node
uint8 State
uint8 Para

#navNodeInfo=1
#odomNodeInfo=2
#modeNodeInfo=3
#coreNodeInfo=4
#bringupNodeInfo=5
#diagNodeInfo=6
#serialNodeInfo=7
#lidarNodeInfo=8
#rpcNodeInfo=9
"""
  __slots__ = ['initInfo','hardwareInfo','Node','State','Para']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       initInfo,hardwareInfo,Node,State,Para

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(diagnosis, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.initInfo is None:
        self.initInfo = 0
      if self.hardwareInfo is None:
        self.hardwareInfo = 0
      if self.Node is None:
        self.Node = 0
      if self.State is None:
        self.State = 0
      if self.Para is None:
        self.Para = 0
    else:
      self.initInfo = 0
      self.hardwareInfo = 0
      self.Node = 0
      self.State = 0
      self.Para = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.initInfo, _x.hardwareInfo, _x.Node, _x.State, _x.Para))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.initInfo, _x.hardwareInfo, _x.Node, _x.State, _x.Para,) = _struct_5B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.initInfo, _x.hardwareInfo, _x.Node, _x.State, _x.Para))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.initInfo, _x.hardwareInfo, _x.Node, _x.State, _x.Para,) = _struct_5B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5B = struct.Struct("<5B")
