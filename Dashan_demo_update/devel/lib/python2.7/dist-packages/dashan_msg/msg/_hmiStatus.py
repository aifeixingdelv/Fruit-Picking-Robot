# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dashan_msg/hmiStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class hmiStatus(genpy.Message):
  _md5sum = "783462f146126d76e1d0b3fc51dd06bf"
  _type = "dashan_msg/hmiStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#communication link state
uint8 commLinkState
#button state
uint8 buttonState
#battery info
uint8 batteryState  # 0:normal state; 1:charge state
uint8 batteryPercent  # left percent 5%-100%

#temperature
uint8 temperature
#humidity
uint8 humidity
#smog alert
uint8 smogAlert  #1:alert 	0:no smog
#push rod pos
uint8 pushRodPos
#emergent push button
uint8 emergentState
#define CMD_SAVE_INIT_PARA 1
#define CMD_SAVE_GOAL_PSTN 2 here send the pos_x pos_y
#define CMD_SEND_GOALS 3 
#define CMD_SEND_CURR_PSTN 4
#define CMD_SAVE_POS 5
#define CMD_SEND_POS 6
#define CMD_SET_INIT_POS 7
#define CMD_VOICE 8
#define CMD_CLEAR_NAVIGOALS 9
uint8 zhishancmdshow
#position show
float32 pos_x
float32 pos_y"""
  __slots__ = ['commLinkState','buttonState','batteryState','batteryPercent','temperature','humidity','smogAlert','pushRodPos','emergentState','zhishancmdshow','pos_x','pos_y']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       commLinkState,buttonState,batteryState,batteryPercent,temperature,humidity,smogAlert,pushRodPos,emergentState,zhishancmdshow,pos_x,pos_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hmiStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.commLinkState is None:
        self.commLinkState = 0
      if self.buttonState is None:
        self.buttonState = 0
      if self.batteryState is None:
        self.batteryState = 0
      if self.batteryPercent is None:
        self.batteryPercent = 0
      if self.temperature is None:
        self.temperature = 0
      if self.humidity is None:
        self.humidity = 0
      if self.smogAlert is None:
        self.smogAlert = 0
      if self.pushRodPos is None:
        self.pushRodPos = 0
      if self.emergentState is None:
        self.emergentState = 0
      if self.zhishancmdshow is None:
        self.zhishancmdshow = 0
      if self.pos_x is None:
        self.pos_x = 0.
      if self.pos_y is None:
        self.pos_y = 0.
    else:
      self.commLinkState = 0
      self.buttonState = 0
      self.batteryState = 0
      self.batteryPercent = 0
      self.temperature = 0
      self.humidity = 0
      self.smogAlert = 0
      self.pushRodPos = 0
      self.emergentState = 0
      self.zhishancmdshow = 0
      self.pos_x = 0.
      self.pos_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_10B2f.pack(_x.commLinkState, _x.buttonState, _x.batteryState, _x.batteryPercent, _x.temperature, _x.humidity, _x.smogAlert, _x.pushRodPos, _x.emergentState, _x.zhishancmdshow, _x.pos_x, _x.pos_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.commLinkState, _x.buttonState, _x.batteryState, _x.batteryPercent, _x.temperature, _x.humidity, _x.smogAlert, _x.pushRodPos, _x.emergentState, _x.zhishancmdshow, _x.pos_x, _x.pos_y,) = _struct_10B2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_10B2f.pack(_x.commLinkState, _x.buttonState, _x.batteryState, _x.batteryPercent, _x.temperature, _x.humidity, _x.smogAlert, _x.pushRodPos, _x.emergentState, _x.zhishancmdshow, _x.pos_x, _x.pos_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.commLinkState, _x.buttonState, _x.batteryState, _x.batteryPercent, _x.temperature, _x.humidity, _x.smogAlert, _x.pushRodPos, _x.emergentState, _x.zhishancmdshow, _x.pos_x, _x.pos_y,) = _struct_10B2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_10B2f = struct.Struct("<10B2f")
