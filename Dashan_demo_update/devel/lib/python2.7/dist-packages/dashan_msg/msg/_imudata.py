# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dashan_msg/imudata.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class imudata(genpy.Message):
  _md5sum = "80dfed3c14e2a11e7333746f7785dbcc"
  _type = "dashan_msg/imudata"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 Temp

float32 Ax
float32 Ay
float32 Az

float32 Gx
float32 Gy
float32 Gz
float32 Yaw

"""
  __slots__ = ['Temp','Ax','Ay','Az','Gx','Gy','Gz','Yaw']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Temp,Ax,Ay,Az,Gx,Gy,Gz,Yaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(imudata, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Temp is None:
        self.Temp = 0.
      if self.Ax is None:
        self.Ax = 0.
      if self.Ay is None:
        self.Ay = 0.
      if self.Az is None:
        self.Az = 0.
      if self.Gx is None:
        self.Gx = 0.
      if self.Gy is None:
        self.Gy = 0.
      if self.Gz is None:
        self.Gz = 0.
      if self.Yaw is None:
        self.Yaw = 0.
    else:
      self.Temp = 0.
      self.Ax = 0.
      self.Ay = 0.
      self.Az = 0.
      self.Gx = 0.
      self.Gy = 0.
      self.Gz = 0.
      self.Yaw = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.Temp, _x.Ax, _x.Ay, _x.Az, _x.Gx, _x.Gy, _x.Gz, _x.Yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.Temp, _x.Ax, _x.Ay, _x.Az, _x.Gx, _x.Gy, _x.Gz, _x.Yaw,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.Temp, _x.Ax, _x.Ay, _x.Az, _x.Gx, _x.Gy, _x.Gz, _x.Yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.Temp, _x.Ax, _x.Ay, _x.Az, _x.Gx, _x.Gy, _x.Gz, _x.Yaw,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8f = struct.Struct("<8f")
