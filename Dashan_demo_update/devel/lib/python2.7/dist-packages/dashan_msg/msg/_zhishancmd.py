# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dashan_msg/zhishancmd.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class zhishancmd(genpy.Message):
  _md5sum = "071fca3f528f7a18348853a91c078ea6"
  _type = "dashan_msg/zhishancmd"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#1:save init position 2:save goal position
#3:navigation goals 4:commision release
#5:save call position 6:one key call
#7：set init position 8：voice
#9：clear navigation goals in yaml
#10: turn voice 
#11:touch screen
#12:miaozhun
#13:shutdown
#14:reboot
#15:turn left
#16:start run after speaking finished,receive from other node,jixuqianjin
#17:start speak,send to other node
#18:patrol is finished
#19:yuan di deng dai
#20：dance
#21:turn right
#22：select one point and generate four directions points
uint8 zhishanCommand
#1:auto charge 2:charge finish 3:send command to serial to prepare charge
uint8 autoCharge
#1: rise 2:fall 3:head turn left 4:head turn right 5:arm up 6:arm down 7:dance 8：stop dance
uint8 rodControl
# reserve to use 
# voice8 1：interact 2：play mode 3:play voice 4：interupt 5:patrol and play
# 6:stop play image after voice is finished 7:patrol and speak
# turn voice 10: 1:up 2:down
# touch screen11：1:enable 2:disable
# turn15and21: the number of PI/4 
uint8 zhishanPara
# voice
# zhishanCommand 8：voice 5:patrol and play zhishanVoice = number
uint8 zhishanVoice"""
  __slots__ = ['zhishanCommand','autoCharge','rodControl','zhishanPara','zhishanVoice']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       zhishanCommand,autoCharge,rodControl,zhishanPara,zhishanVoice

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(zhishancmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.zhishanCommand is None:
        self.zhishanCommand = 0
      if self.autoCharge is None:
        self.autoCharge = 0
      if self.rodControl is None:
        self.rodControl = 0
      if self.zhishanPara is None:
        self.zhishanPara = 0
      if self.zhishanVoice is None:
        self.zhishanVoice = 0
    else:
      self.zhishanCommand = 0
      self.autoCharge = 0
      self.rodControl = 0
      self.zhishanPara = 0
      self.zhishanVoice = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.zhishanCommand, _x.autoCharge, _x.rodControl, _x.zhishanPara, _x.zhishanVoice))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.zhishanCommand, _x.autoCharge, _x.rodControl, _x.zhishanPara, _x.zhishanVoice,) = _struct_5B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.zhishanCommand, _x.autoCharge, _x.rodControl, _x.zhishanPara, _x.zhishanVoice))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.zhishanCommand, _x.autoCharge, _x.rodControl, _x.zhishanPara, _x.zhishanVoice,) = _struct_5B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5B = struct.Struct("<5B")
